class Node:
    def __init__(self, data):
        self.data = data
        self.left = None
        self.right = None

def insert(root, data):
    if root is None:
        return Node(data)
    if root.data == data:
        return root
    if root.data < data:
        root.right = insert(root.right, data)
    else:
        root.left = insert(root.left, data)
    return root

def search(root, data):
    if root is None or root.data == data:
        return root
    if root.data<data:
        return search(root.right, data)
    else:
        return search(root.left, data)

def get_successor(root):
    curr = root.right
    while curr is not None and curr.left is not None:
        curr = curr.left
    return curr

def del_node(root,key):
    if root is None:
        return root
    if root.data < key:
        root.right = del_node(root.right,key)
    elif root.data > key:
        root.left = del_node(root.left,key)
    else:
        if root.left is None:
            return root.right
        if root.right is None:
            return root.left
        succ = get_successor(root)
        root.data = succ.data
        root.right = del_node(root.right,succ.data)
    return root

def min_value(root):
    if root is None:
        return -1
    curr = root
    while curr.left is not None:
        curr = curr.left
    return curr.data

def max_value(root):
    if root is None:
        return -1
    curr = root
    while curr.right is not None:
        curr = curr.right
    return curr.data

def inorder(root):
    if not root:
        return
    inorder(root.left)
    print(root.data,end=" ")
    inorder(root.right)

if __name__ == '__main__':
    r = Node(50)
    r = insert(r, 30)
    r = insert(r, 20)
    r = insert(r, 40)
    r = insert(r, 70)
    r = insert(r, 60)
    r = insert(r, 80)
    inorder(r)
    print()
    print("Found" if search(r, 70) else "Not found")
    del_node(r, 70)
    print("Found" if search(r, 70) else "Not found")
    inorder(r)
    print()
    print(f"Minimum in the BST : {min_value(r)}")
    print(f"Maximum in the BST : {max_value(r)}")
