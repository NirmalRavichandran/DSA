class Node:
    def __init__(self, data):
        self.data = data
        self.left = self.right = None

def printInorder(root):
    if root is None:
        return
    printInorder(root.left)
    print(root.data,end=" ")
    printInorder(root.right)

def printPostorder(root):
    if root is None:
        return
    printPostorder(root.left)
    printPostorder(root.right)
    print(root.data,end=" ")

def printPreorder(root):
    if root is None:
        return
    print(root.data,end=" ")
    printPreorder(root.left)
    printPreorder(root.right)

def level_rec(root,level,res):
    if root is None:
        return
    if len(res)<=level:
        res.append([])
    res[level].append(root.data)
    level_rec(root.left,level+1,res)
    level_rec(root.right,level+1,res)

def levelOrder(root):
    res = []
    level_rec(root,0,res)
    return res

def bfs(root):
    queue = [root]
    res =[]
    curr_level = 0
    while queue:
        len_q = len(queue)
        res.append([])
        for _ in range(len_q):
            node = queue.pop(0)
            res[curr_level].append(node.data)
            if node.left:
                queue.append(node.left)
            if node.right:
                queue.append(node.right)
        curr_level += 1
    return res

if __name__ == '__main__':
    root = Node(1)
    root.left = Node(2)
    root.right = Node(3)
    root.left.left = Node(4)
    root.left.right = Node(5)
    print("Postorder traversal of binary tree is")
    printPostorder(root)
    print()
    print("Preorder traversal of binary tree is")
    printPreorder(root)
    print()
    print("Inorder traversal of binary tree is")
    printInorder(root)
    print()
    print("Level order traversal of binary tree is")
    print(levelOrder(root))
    print(bfs(root))
