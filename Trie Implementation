class TrieNode{
    TrieNode[] children;
    boolean isEnd;
    
    public TrieNode(){
        children = new TrieNode[26];
        isEnd = false;
    }
}

class Trie{
    private final TrieNode root;
    
    public Trie(){
        root = new TrieNode();
    }
    
    public void insert(String key){
        TrieNode curr = root;
        for(char c: key.toCharArray()){
            if(curr.children[c-'a']==null){
                TrieNode newnode = new TrieNode();
                curr.children[c-'a'] = newnode;
            }
            curr = curr.children[c-'a'];
        }
        curr.isEnd = true;
    }
    
    boolean search( String key){
        TrieNode curr = root;
        for(char c: key.toCharArray()){
            if(curr.children[c-'a']==null) return false;
            curr = curr.children[c-'a'];
        }
        return curr.isEnd;
    }
    
    boolean isPrefix(String key){
        TrieNode curr = root;
        for(char c: key.toCharArray()){
            if(curr.children[c-'a']==null) return false;
            curr = curr.children[c-'a'];
        }
        return true;
    }
    
    public void displayWords(){
        displayHelper(root, new StringBuilder());
    }
    
    private void displayHelper(TrieNode node, StringBuilder word){
        if(node.isEnd){
            System.out.println(word.toString());
        }
        
        for(int i=0;i<26;i++){
            if(node.children[i]!=null){
                word.append((char)(i+'a'));
                displayHelper(node.children[i],word);
                word.deleteCharAt(word.length()-1);
            }
        }
    }
}

public class Main
{
	public static void main(String[] args) {
		Trie a = new Trie();
		String[] arr = {"and", "ant", "do", "dad"};
		for(String s: arr){
		    a.insert(s);
		}
		
		System.out.println(a.search("do"));      // true
        System.out.println(a.search("dog"));     // false
        System.out.println(a.isPrefix("da"));    // true
        System.out.println(a.isPrefix("dan"));
        a.displayWords();
	}
}
